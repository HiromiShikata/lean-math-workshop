-- import Mathlib.Topology.MetricSpace.Basic
import Mathlib.Data.Finset.Lattice
import Mathlib.Topology.MetricSpace.CauSeqFilter
import Mathlib.Analysis.Normed.Group.Basic
import Mathlib.Analysis.Calculus.Deriv.Basic

noncomputable
section

example : (1 : ‚Ñù) = Real.ofCauchy (Quotient.mk CauSeq.equiv (CauSeq.const abs 1)) := 
  Real.ofCauchy_one.symm

def ¬´0.9999999¬ª : CauSeq ‚Ñö abs where
  val n := 1 - (10 ^ n : ‚Ñö)‚Åª¬π
  property := by
    intro Œµ Œµ0
    simp only [sub_sub_sub_cancel_left]
    have ‚ü®i, hi‚ü© : ‚àÉ i : ‚Ñï, (Œµ / 2)‚Åª¬π < 10 ^ i := pow_unbounded_of_one_lt (Œµ / 2)‚Åª¬π (by linarith)
    have hi : 2 * (10 ^ i : ‚Ñö)‚Åª¬π < Œµ := (lt_div_iff' (by linarith)).mp (inv_lt_of_inv_lt (half_pos Œµ0) hi)
    exists i
    intro j hj
    calc |(10 ^ i : ‚Ñö)‚Åª¬π - (10 ^ j : ‚Ñö)‚Åª¬π|
      _ ‚â§ |(10 ^ i : ‚Ñö)‚Åª¬π| + |(10 ^ j : ‚Ñö)‚Åª¬π| := by apply abs_sub
      _ ‚â§ |(10 ^ i : ‚Ñö)‚Åª¬π| + |(10 ^ i : ‚Ñö)‚Åª¬π| := by simpa [abs] using inv_pow_le_inv_pow_of_le (by linarith) hj
      _ = 2 * (10 ^ i : ‚Ñö)‚Åª¬π                  := by simp [abs]; ring
      _ < Œµ                                   := hi

theorem ¬´1 = 0.9999999¬ª : (1 : ‚Ñù) = Real.ofCauchy (Quotient.mk CauSeq.equiv ¬´0.9999999¬ª) := by
  calc (1 : ‚Ñù) = Real.ofCauchy (Quotient.mk CauSeq.equiv (CauSeq.const abs 1)) := Real.ofCauchy_one.symm
    _= Real.ofCauchy (Quotient.mk CauSeq.equiv ¬´0.9999999¬ª) := by
      rw [¬´0.9999999¬ª]
      congr 1
      apply Quotient.sound
      intro Œµ Œµ0
      obtain ‚ü®n, hn‚ü© : ‚àÉ n : ‚Ñï, Œµ‚Åª¬π < 10 ^ n := pow_unbounded_of_one_lt Œµ‚Åª¬π rfl
      have : (10 ^ n : ‚Ñö)‚Åª¬π < Œµ := inv_lt_of_inv_lt Œµ0 hn
      exists n
      intro h hj
      simp [abs]
      calc (10 ^ h : ‚Ñö )‚Åª¬π ‚â§ (10 ^ n : ‚Ñö)‚Åª¬π := inv_pow_le_inv_pow_of_le (by linarith) hj
        _ < Œµ := this

open Filter Topology Set Classical

def HasFinCover {Œπ : Type} (U : Œπ ‚Üí Set ‚Ñù) (s : Set ‚Ñù)  := 
  ‚àÉ (t : Finset Œπ), s ‚äÜ ‚ãÉ i ‚àà t, U i

variable {Œπ : Type} (U : Œπ ‚Üí Set ‚Ñù)

def nestedIntervalSucc (a b : ‚Ñù) : ‚Ñù √ó ‚Ñù :=
  if ¬¨HasFinCover U (Icc a ((a + b) / 2)) then ‚ü®a, (a + b) / 2‚ü© else ‚ü®(a + b) / 2, b‚ü©

example (x y : ‚Ñù) (P : Prop) : (if P then x else y) = x ‚à® (if P then x else y) = y := by
  exact ite_eq_or_eq P x y

def nestedInterval : ‚Ñï ‚Üí ‚Ñù √ó ‚Ñù 
  | 0 => ‚ü®0, 1‚ü©
  | n + 1 => nestedIntervalSucc U (nestedInterval n).1 (nestedInterval n).2

local notation "I(" n ")" => Icc (Prod.fst (nestedInterval U n)) (Prod.snd (nestedInterval U n))

variable {U}

lemma hasFinCover_concat (a b c : ‚Ñù) (hac : HasFinCover U (Icc a c)) (hcb : HasFinCover U (Icc c b)) :
    HasFinCover U (Icc a b) := by
  rcases hac with ‚ü®Œπ_ac, cover_ac‚ü©
  rcases hcb with ‚ü®Œπ_cb, cover_cb‚ü©
  exists Œπ_ac ‚à™ Œπ_cb
  intro x hx
  suffices ‚àÉ i, (i ‚àà Œπ_ac ‚à® i ‚àà Œπ_cb) ‚àß x ‚àà U i by
    simpa using this
  cases le_total x c
  case inl hxc =>
    obtain ‚ü®i, hi‚ü© : ‚àÉ i, i ‚àà Œπ_ac ‚àß x ‚àà U i := by simpa using cover_ac ‚ü®hx.left, hxc‚ü©
    exact ‚ü®i, Or.inl hi.1, hi.2‚ü©
  case inr hxc =>
    obtain ‚ü®i, hi‚ü© : ‚àÉ i, i ‚àà Œπ_cb ‚àß x ‚àà U i := by simpa using cover_cb ‚ü®hxc, hx.right‚ü©
    exact ‚ü®i, Or.inr hi.1, hi.2‚ü©

lemma not_hasFinCover_concat {a b c : ‚Ñù} :
    ¬¨HasFinCover U (Icc a b) ‚Üí HasFinCover U (Icc a c) ‚Üí ¬¨HasFinCover U (Icc c b) := by
  contrapose!
  intro H
  apply hasFinCover_concat a b c H.1 H.2

lemma not_hasFinCover_concat' {a b : ‚Ñù} (h : ¬¨HasFinCover U (Icc a b)) : 
    HasFinCover U (Icc a ((a + b) / 2)) ‚Üí ¬¨HasFinCover U (Icc ((a + b) / 2) b) := 
  not_hasFinCover_concat h

lemma nestedIntervalSucc_left (h : ¬¨HasFinCover U (Icc a ((a + b) / 2))) : 
    nestedIntervalSucc U a b = ‚ü®a, (a + b) / 2‚ü© := 
  if_pos h
  
lemma nestedIntervalSucc_right (h : HasFinCover U (Icc a ((a + b) / 2))) : 
    nestedIntervalSucc U a b = ‚ü®(a + b) / 2, b‚ü© := 
  if_neg (not_not_intro h)

variable (U) {a b : ‚Ñù}

theorem nestedIntervalSucc_eq_or_eq (a b : ‚Ñù) : 
    nestedIntervalSucc U a b = ‚ü®a, (a + b) / 2‚ü© ‚à® 
      nestedIntervalSucc U a b = ‚ü®(a + b) / 2, b‚ü© := by
  apply ite_eq_or_eq

theorem nestedInterval_le : ‚àÄ n, (nestedInterval U n).1 < (nestedInterval U n).2 
  | 0 => Real.zero_lt_one
  | n + 1 => by
    have := nestedInterval_le n
    cases nestedIntervalSucc_eq_or_eq U (nestedInterval U n).1 (nestedInterval U n).2 with
    | inl h => rw [nestedInterval, h]; dsimp only; linarith
    | inr h => rw [nestedInterval, h]; dsimp only; linarith


def nestedIntervalSeq {Œπ : Type} (U : Œπ ‚Üí Set ‚Ñù) : ‚Ñï ‚Üí ‚Ñù := 
  fun n => ((nestedInterval U n).1 + (nestedInterval U n).2) / 2

theorem nestedIntervalSeq_is_nested_succ (n : ‚Ñï) : I(n + 1) ‚äÜ I(n) := by
  intro x hx
  have := nestedInterval_le U n
  cases nestedIntervalSucc_eq_or_eq U (nestedInterval U n).1 (nestedInterval U n).2 with
  | inl h => rw [nestedInterval, h, Set.mem_Icc] at hx; dsimp only at hx; split_ands <;> linarith
  | inr h => rw [nestedInterval, h, Set.mem_Icc] at hx; dsimp only at hx; split_ands <;> linarith

theorem nestedIntervalSeq_is_nested {i j : ‚Ñï} (hij : i ‚â§ j) : I(j) ‚äÜ I(i) := by 
  set k := j - i
  have : j = i + k := (Nat.add_sub_of_le hij).symm
  rw [this]
  induction k with
  | zero => apply rfl.subset
  | succ k ih => intro x hx; apply ih (nestedIntervalSeq_is_nested_succ U (i + k) hx)

theorem nestedIntervalSeq_mem (n : ‚Ñï) : nestedIntervalSeq U n ‚àà I(n) := by
  have := nestedInterval_le U n
  simp only [mem_Icc, nestedIntervalSeq] 
  split_ands <;> linarith

theorem nestedIntervalSeq_mem_of_le {i j : ‚Ñï} (hij : i ‚â§ j): 
    nestedIntervalSeq U j ‚àà I(i) := 
  nestedIntervalSeq_is_nested _ hij (nestedIntervalSeq_mem _ _)

variable {U}
  
theorem nestedInterval_not_hasFinCover (h : ¬¨HasFinCover U (Icc 0 1)) : ‚àÄ n : ‚Ñï, ¬¨HasFinCover U I(n)
  | 0 => h
  | n + 1 => by
    by_cases H : HasFinCover U (Icc (nestedInterval U n).1 (((nestedInterval U n).1 + (nestedInterval U n).2) / 2))
    case pos =>
      rw [nestedInterval]
      rw [nestedIntervalSucc_right H]
      apply not_hasFinCover_concat ?_ H
      apply nestedInterval_not_hasFinCover h n
    case neg =>
      rw [nestedInterval]
      rw [nestedIntervalSucc_left H]
      dsimp only
      apply H

variable (U)

theorem nestedInterval_len : ‚àÄ n : ‚Ñï, (nestedInterval U n).2 - (nestedInterval U n).1 = (2 ^ n : ‚Ñù)‚Åª¬π
  | 0 => by simp [nestedInterval]
  | n + 1 => by
    rw [nestedInterval]
    have := nestedInterval_len n
    set a := (nestedInterval U n).1
    set b := (nestedInterval U n).2
    cases nestedIntervalSucc_eq_or_eq U (nestedInterval U n).1 (nestedInterval U n).2 with
    | inl H =>
      rw [H]
      field_simp at this ‚ä¢
      calc (a + b - 2 * a) * 2 ^ (n + 1) = (b - a) * 2 ^ n * 2 := by ring
        _= 2 := by rw [this]; ring
    | inr H =>
      rw [H]
      field_simp at this ‚ä¢
      calc (b * 2 - (a + b)) * 2 ^ (n + 1) = (b - a) * 2 ^ n * 2 := by ring
        _= 2 := by rw [this]; ring


theorem nestedIntervalSeq_isCauSeq_aux {x y : ‚Ñù} (hx : x ‚àà Icc a b) (hy : y ‚àà Icc a b) : |y - x| ‚â§ (b - a) := by 
  dsimp [Icc] at hx hy
  apply (abs_sub_le_iff.2 ‚ü®_, _‚ü©) <;> linarith

theorem nestedIntervalSeq_isCauSeq_aux' {i j : ‚Ñï} (hij : i ‚â§ j) : 
    |nestedIntervalSeq U j - nestedIntervalSeq U i| ‚â§ (2 ^ i : ‚Ñù)‚Åª¬π := by
  have := nestedIntervalSeq_isCauSeq_aux (nestedIntervalSeq_mem U i) (nestedIntervalSeq_mem_of_le U hij)
  simpa [nestedInterval_len] using this

theorem nestedIntervalSeq_isCauSeq : IsCauSeq abs (nestedIntervalSeq U) := by
  intro Œµ Œµ0
  have ‚ü®i, hi‚ü© : ‚àÉ i : ‚Ñï, Œµ‚Åª¬π < 2 ^ i := pow_unbounded_of_one_lt Œµ‚Åª¬π (by linarith)
  have hi : (2 ^ i : ‚Ñù)‚Åª¬π < Œµ := inv_lt_of_inv_lt Œµ0 hi
  exists i
  intro j hj
  calc |nestedIntervalSeq U j - nestedIntervalSeq U i| 
    _ ‚â§ (2 ^ i : ‚Ñù)‚Åª¬π := nestedIntervalSeq_isCauSeq_aux' U hj
    _ < Œµ := hi

def nestedIntervalCauseq : CauSeq ‚Ñù abs where
  val := nestedIntervalSeq U
  property := nestedIntervalSeq_isCauSeq U

abbrev nestedIntervalLim : ‚Ñù := (nestedIntervalCauseq U).lim

local instance : CauSeq.IsComplete ‚Ñù norm := inferInstanceAs (CauSeq.IsComplete ‚Ñù abs)

lemma nestedIntervalSeq_tendsto : Tendsto (nestedIntervalSeq U) atTop (ùìù (nestedIntervalLim U)) := by
  apply (nestedIntervalCauseq U).tendsto_limit

lemma nestedIntervalLim_mem_init : nestedIntervalLim U ‚àà Icc 0 1 := by
  apply isClosed_Icc.mem_of_tendsto (nestedIntervalSeq_tendsto U)
  apply eventually_of_forall (fun n => nestedIntervalSeq_mem_of_le U (Nat.zero_le n))

lemma nestedIntervalLim_mem (n : ‚Ñï) : nestedIntervalLim U ‚àà I(n) := by
  apply isClosed_Icc.mem_of_tendsto (nestedIntervalSeq_tendsto U)
  rw [eventually_atTop]
  exists n
  intro m
  apply nestedIntervalSeq_mem_of_le U

theorem hasFinCover_of_Icc (hU : ‚àÄ (i : Œπ), IsOpen (U i)) (cover : Icc 0 1 ‚äÜ ‚ãÉ (i : Œπ), U i) : 
    HasFinCover U (Icc 0 1) := by 
  by_contra h
  rcases cover (nestedIntervalLim_mem_init U) with ‚ü®_, ‚ü®i, rfl‚ü©, hU'‚ü©
  rcases Metric.isOpen_iff.1 (hU i) (nestedIntervalLim U) hU' with ‚ü®Œµ, Œµ0, hŒµ‚ü©
  have ‚ü®n, hn‚ü© : ‚àÉ n : ‚Ñï, (Œµ / 2)‚Åª¬π < 2 ^ n := pow_unbounded_of_one_lt (Œµ / 2)‚Åª¬π (by linarith)
  have hn : 2 * (2 ^ n : ‚Ñù)‚Åª¬π < Œµ := (lt_div_iff' (by linarith)).mp (inv_lt_of_inv_lt (half_pos Œµ0) hn)
  apply nestedInterval_not_hasFinCover h n
  exists {i}
  set a := (nestedInterval U n).1
  set b := (nestedInterval U n).2
  set c := nestedIntervalLim U
  intro x (hx : a ‚â§ x ‚àß x ‚â§ b)
  suffices x ‚àà Metric.ball c Œµ by
    simp_rw [Finset.mem_singleton, Set.iUnion_iUnion_eq_left]
    apply hŒµ this
  have := calc 2 * |x - c| 
    _ = |2 * (x - c)| := by simp [abs_mul] 
    _ = |(x - b) + (x - a) + (b - c) + (a - c)| := by congr 1; ring
    _ ‚â§ |(x - b) + (x - a) + (b - c)| + |a - c| := by apply abs_add
    _ ‚â§ |(x - b) + (x - a)| + |b - c| + |a - c| := by apply add_le_add_right (abs_add _ _)
    _ ‚â§ |x - b| + |x - a| + |b - c| + |a - c|   := by apply add_le_add_right (add_le_add_right (abs_add _ _) _)
    _ ‚â§ (2 ^ n : ‚Ñù)‚Åª¬π + (2 ^ n : ‚Ñù)‚Åª¬π + (2 ^ n : ‚Ñù)‚Åª¬π + (2 ^ n : ‚Ñù)‚Åª¬π := by 
      have hba : b - a = (2 ^ n : ‚Ñù)‚Åª¬π := nestedInterval_len U n
      have hc : a ‚â§ c ‚àß c ‚â§ b := nestedIntervalLim_mem U n
      repeat apply add_le_add
      repeat apply (abs_sub_le_iff.2 ‚ü®_, _‚ü©) <;> linarith
    _ = 2 * (2 * (2 ^ n : ‚Ñù)‚Åª¬π) := by field_simp; ring
  calc |x - c| ‚â§ 2 * (2 ^ n : ‚Ñù)‚Åª¬π := (mul_le_mul_left (by linarith)).1 this
    _ < Œµ := hn
  
end